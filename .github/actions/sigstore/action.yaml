name: "Sigstore"
description: "Installs and configures cosign, and outputs Sigstore stack URLs"

inputs:
  environment:
    description: "Sigstore public good environment"
    default: "production"
  workingDirectory:
    description: "Working directory used when running cosign initialize"
    default: ""

outputs:
  fulcioUrl:
    description: "Sigstore Fulcio URL. Defaults to the production public good instance"
    value: "${{ steps.config.outputs.fulcioUrl }}"
  rekorUrl:
    description: "Sigstore Rekor URL. Defaults to the production public good instance"
    value: "${{ steps.config.outputs.rekorUrl }}"
  tufMirror:
    description: "cosign TUF root mirror URL"
    value: "${{ steps.config.outputs.rekorUrl }}"
  tufRoot:
    description: "cosign TUF initial trusted root"
    value: "${{ steps.config.outputs.tufRoot }}"

runs:
  using: "composite"
  steps:
    - name: Determine environment
      id: config
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        function output() {
          name="${1}"
          value="${2}"

          echo "${name}=${value}" >> $GITHUB_OUTPUT
        }

        case "${ENVIRONMENT}" in
          "production")
            output "fulcioUrl" "https://fulcio.sigstore.dev"
            output "rekorUrl"  "https://rekor.sigstore.dev"
            ;;
          "staging")
            output "fulcioUrl" "https://fulcio.sigstage.dev"
            output "rekorUrl"  "https://rekor.sigstage.dev"
            output "tufMirror" "https://tuf-repo-cdn.sigstage.dev"
            output "tufRoot"   "sigstore/staging/1.root.json"
            ;;
          *)
            echo "Invalid value for environment: '${ENVIRONMENT}'. Must be one of 'production' or 'staging'"
            exit 1
            ;;
        esac
    - name: Install Cosign
      uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3
      with:
        cosign-release: v2.1.1
    - name: Initialize Cosign
      if: steps.config.outputs.tufMirror != '' && steps.config.outputs.tufRoot != ''
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        cosign initialize --mirror ${{ steps.config.outputs.tufMirror }} --root ${{ steps.config.outputs.tufRoot }}
